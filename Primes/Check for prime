// methods to find prime numbers in c++

//method 1 : Naive method

// time complexity : O(n)

#include <bits/stdc++.h>
using namespace std;

bool isPrime - 1(int n)
{
    // base case
    if (n <= 1)
        return false;

    // Check from 2 to n-1 since 1 has been checked above and till n-1 bz if take till
    //n then n % n ==0 so
    for (int i = 2; i < n; i++)
        if (n % i == 0)
            return false;

    return true;
}

int main()
{
    isPrime - 1(11) ? cout << " true\n" : cout << " false\n";
    isPrime - 1(15) ? cout << " true\n" : cout << " false\n";
    return 0;
}

// Method 2:  effiecient, time complexity O(sqrt(n))
#include <bits/stdc++.h>
using namespace std;

bool isPrime - 2(int n)
{
    if (n == 1)
        return false;

    ////loop running from i=2 to sqrt(n)

    for (int i = 2; i * i <= n; i++)
    {
        if (n % i == 0)
            return false;

        return true;
    }
}

//method 3 : most optimised , which is 3 times faster than M-2

bool isPrime_3(int n)
{

    if (n == 1)
        return false;

    if (n == 3 || n == 2)
        return false;

    //checkimg for divisibilty of 2 and 3

    if (n % 2 == 0 || n % 3 == 0)
        return false;

    //checking for number divisible by 5

    for (int i = 5; i * i <= n; i++)
    {

        //checking for number divible by 7 or not

        if (n % i == 0 || n % (i + 2) == 0)
        {
            return false;
        }

        return true;
    }
}
